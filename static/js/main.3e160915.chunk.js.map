{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","handleData","list","setList","className","onKeyDown","e","keyCode","preventDefault","stopPropagation","onChange","target","value","onClick","map","k","style","backgroundColor","randomColor","key","color","id","l","splice","handleRemoveItem","width","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAmFeA,MA/Ef,WAAgB,IAAD,EACeC,mBAAS,KADxB,mBACNC,EADM,KACAC,EADA,OAEYF,mBAAS,IAFrB,mBAENG,EAFM,KAEAC,EAFA,KA0Cd,OACC,6BACC,yBAAKC,UAAU,OACd,2CACA,yBAAKA,UAAU,cACd,uBAAGA,UAAU,cAAcJ,GAC3B,6BACC,8BACC,2BACCK,UA3Ce,SAACC,GACJ,KAAdA,EAAEC,UACLD,EAAEE,iBACFF,EAAEG,oBAyCGC,SAAU,SAACJ,GAAD,OAAOL,EAAWK,EAAEK,OAAOC,QACrCA,MAAOZ,IAER,+BAGF,6BACC,4BACCI,UAAU,cACVS,QAAS,SAACP,GAxDfH,GAAQ,SAACG,GAAD,4BAAYA,GAAZ,CAAeN,SAsDnB,QAQA,8BAED,6BA/CF,6BACEE,EAAKY,KAAI,SAACR,EAAGS,GAAJ,OACT,wBAAIC,MAAO,CAAEC,gBAAiBC,OAAiBC,IAAKJ,GACnD,2BACET,EACD,6BACA,4BAAQc,MAAO,MAAOP,QAAS,kBAbZ,SAACQ,GACzB,IAAMC,EAAC,YAAQpB,GACfoB,EAAEC,OAAOF,EAAI,GACblB,EAAQmB,GAUkCE,CAAiBT,KAAtD,eA0CF,wBAAIC,MAAO,CAAES,MAAO,SACpB,4BAAQZ,QAAS,SAACP,GAAD,OAhCpBH,EAAQ,SACRuB,QAAQC,IAAIzB,KA+BT,iBAED,mDCjEgB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3e160915.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport randomColor from 'randomcolor';\n\nfunction App() {\n\tconst [ data, handleData ] = useState(' ');\n\tconst [ list, setList ] = useState([]);\n\n\tconst saveItem = () => {\n\t\tsetList((e) => [ ...e, data ]);\n\t};\n\n\tconst handleKeyDown = (e) => {\n\t\tif (e.keyCode === 13) {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t}\n\t};\n\n\tconst handleRemoveItem = (id) => {\n\t\tconst l = [ ...list ];\n\t\tl.splice(id, 1);\n\t\tsetList(l);\n\t};\n\tconst showTable = () => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{list.map((e, k) => (\n\t\t\t\t\t<li style={{ backgroundColor: randomColor() }} key={k}>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{e}\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<button color={'red'} onClick={() => handleRemoveItem(k)}>\n\t\t\t\t\t\t\t\tDone\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t};\n\n\tconst deleteList = () => {\n\t\tsetList([]);\n\t\tconsole.log(list);\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>My TODO App</h1>\n\t\t\t\t<div className=\"App-header\">\n\t\t\t\t\t<p className=\"Input-todo\">{data}</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\t\t\tonChange={(e) => handleData(e.target.value)}\n\t\t\t\t\t\t\t\tvalue={data}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"Save-Button\"\n\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\tsaveItem(e);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>{showTable()}</div>\n\t\t\t\t\t<hr style={{ width: '50%' }} />\n\t\t\t\t\t<button onClick={(e) => deleteList(e)}> Delete List</button>\n\t\t\t\t</div>\n\t\t\t\t<h1>programandoconro</h1>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}