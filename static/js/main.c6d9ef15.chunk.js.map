{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","title","handleTitle","data","handleData","list","setList","color","setColor","handleKeyDown","e","keyCode","preventDefault","stopPropagation","className","Container","Typography","style","textAlign","fontSize","Card","TextField","padding","backgroundColor","minWidth","placeholder","onKeyDown","onChange","target","value","multiple","multiline","alignItems","minHeight","Button","size","variant","onClick","myColors","array","i","length","push","randomColor","chooseColor","console","log","saveItem","map","k","Paper","key","raised","width","CardContent","id","l","splice","handleRemoveItem","alignContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6d9ef15.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport randomColor from 'randomcolor';\nimport { Button, Paper, Card, CardContent, TextField, Container, Typography } from '@material-ui/core';\n\nfunction App() {\n\tconst [title, handleTitle] = useState('');\n\tconst [data, handleData] = useState('');\n\tconst [list, setList] = useState([]);\n\tconst [color, setColor] = useState([]);\n\n\tconst saveItem = () => {\n\t\tsetList((e) => [...e, title + ': ' + data]);\n\n\t\tfunction chooseColor(array = []) {\n\t\t\tfor (let i = 0; i < color.length + 1; i++) {\n\t\t\t\tarray.push(randomColor());\n\t\t\t}\n\t\t}\n\n\t\tconst myColors = [];\n\t\tchooseColor(myColors);\n\t\tconsole.log(myColors);\n\t\tsetColor(myColors);\n\t};\n\n\tconst handleKeyDown = (e) => {\n\t\tif (e.keyCode === 13) {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t}\n\t};\n\n\tconst clearInput = () => {\n\t\thandleData('');\n\t\thandleTitle('');\n\t};\n\n\tconst handleRemoveItem = (id) => {\n\t\tconst l = [...list];\n\t\tl.splice(id, 1);\n\t\tsetList(l);\n\t};\n\tconst showTable = () => {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t{list.map((e, k) => (\n\t\t\t\t\t<Paper key={k} style={{ backgroundColor: 'black' }}>\n\t\t\t\t\t\t<Card style={{ backgroundColor: color[k] }} raised={true} width=\"200px\">\n\t\t\t\t\t\t\t<CardContent\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\ttextAlign: 'left',\n\t\t\t\t\t\t\t\t\tminHeight: '400px'\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Typography style={{ fontSize: '40px' }}>{e}</Typography>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t</Card>\n\n\t\t\t\t\t\t<Button onClick={() => handleRemoveItem(k)} variant=\"outlined\" color=\"secondary\">\n\t\t\t\t\t\t\tDone\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t</Paper>\n\t\t\t\t))}\n\t\t\t</Container>\n\t\t);\n\t};\n\tconst deleteList = () => {\n\t\tsetList([]);\n\t\tconsole.log(list);\n\t};\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Container className=\"container\">\n\t\t\t\t<Typography\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\tfontSize: 'calc(25px + 2vmin)'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tMy TODO App{' '}\n\t\t\t\t</Typography>\n\t\t\t\t<Container className=\"Todo\">\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tstyle={{ padding: '10%', backgroundColor: 'white', minWidth: '500px' }}\n\t\t\t\t\t\t\tplaceholder=\"Subject:\"\n\t\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\t\tonChange={(e) => handleTitle(e.target.value)}\n\t\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\t\tmultiple={true}\n\t\t\t\t\t\t></TextField>\n\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tplaceholder=\"Description:\"\n\t\t\t\t\t\t\tmultiline={true}\n\t\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\talignItems: 'initial',\n\t\t\t\t\t\t\t\tminHeight: '200px',\n\t\t\t\t\t\t\t\tminWidth: '500px',\n\t\t\t\t\t\t\t\tbackgroundColor: 'white'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\t\tonChange={(e) => handleData(e.target.value)}\n\t\t\t\t\t\t\tvalue={data}\n\t\t\t\t\t\t></TextField>\n\t\t\t\t\t</Card>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tsaveItem(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tclearInput(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tClear\n\t\t\t\t\t</Button>\n\t\t\t\t\t<hr />\n\n\t\t\t\t\t{showTable()}\n\t\t\t\t\t<hr style={{ width: '50%' }} />\n\t\t\t\t\t<Button size=\"large\" variant=\"outlined\" color=\"secondary\" onClick={(e) => deleteList(e)}>\n\t\t\t\t\t\tClear <br></br> List\n\t\t\t\t\t</Button>\n\t\t\t\t\t<br />\n\t\t\t\t</Container>\n\n\t\t\t\t<h1 style={{ color: 'white', textAlign: 'center', alignContent: 'baseline' }}>programandoconro</h1>\n\t\t\t</Container>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}