{"version":3,"sources":["colors.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["MyColors","i","push","randomColor","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","ref","App","useState","subject","setSubject","description","setDescription","todoList","setTodoList","color","setColor","className","Container","Typography","style","textAlign","fontSize","Card","TextField","padding","backgroundColor","minWidth","placeholder","onChange","e","target","value","multiple","multiline","alignItems","minHeight","Button","size","variant","onClick","map","k","Paper","key","raised","width","CardContent","id","l","splice","handleRemoveItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfd661bb.chunk.js","sourcesContent":["import randomColor from 'randomcolor';\n\nconst MyColors = [];\nfor (let i = 0; i < 999; i++) {\n\tMyColors.push(randomColor());\n}\n\nexport default MyColors;\n","import firebase from 'firebase';\n\nconst config = {\n\tapiKey: 'AIzaSyCSQbRH-2FsHE7mHMTZYXptMZKcf_t5wGs',\n\tauthDomain: 'mytodoapp-9b5fa.firebaseapp.com',\n\tdatabaseURL: 'https://mytodoapp-9b5fa.firebaseio.com',\n\tprojectId: 'mytodoapp-9b5fa',\n\tstorageBucket: 'mytodoapp-9b5fa.appspot.com',\n\tmessagingSenderId: '509159035749',\n\tappId: '1:509159035749:web:dbaac8820b3bb1dbe9078c',\n\tmeasurementId: 'G-STHFCELLPN'\n};\n\nif (!firebase.apps.length) {\n\tfirebase.initializeApp(config);\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Button, Paper, Card, CardContent, TextField, Container, Typography } from '@material-ui/core';\nimport MyColors from './colors';\nimport firebase from 'firebase';\nimport './firebase';\n\nconst db = firebase.database().ref('/todos/');\n\nfunction App() {\n\tconst [subject, setSubject] = useState('');\n\tconst [description, setDescription] = useState('');\n\tconst [todoList, setTodoList] = useState([]);\n\tconst [color, setColor] = useState([]);\n\n\tconst saveItem = () => {\n\t\tsetColor(MyColors);\n\t\tsetTodoList((e) => [\n\t\t\t...e,\n\t\t\t<Container>\n\t\t\t\t<Card>{subject + ': '} </Card>\n\t\t\t\t<hr />\n\t\t\t\t<Card> {description}</Card>\n\t\t\t</Container>\n\t\t]);\n\t\tdb.push('Subject: ' + subject + '/ Description: ' + description);\n\t};\n\n\tconst clearInput = () => {\n\t\tsetDescription('');\n\t\tsetSubject('');\n\t};\n\n\tconst deletetodoList = () => {\n\t\tsetTodoList([]);\n\t};\n\n\tconst handleRemoveItem = (id) => {\n\t\tconst l = [...todoList];\n\t\tl.splice(id, 1);\n\t\tsetTodoList(l);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Container className=\"container\">\n\t\t\t\t<Typography\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\tfontSize: 'calc(25px + 2vmin)'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tMy TODO App{' '}\n\t\t\t\t</Typography>\n\t\t\t\t<Container className=\"Todo\">\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tstyle={{ padding: '10%', backgroundColor: 'white', minWidth: '500px' }}\n\t\t\t\t\t\t\tplaceholder=\"Subject:\"\n\t\t\t\t\t\t\tonChange={(e) => setSubject(e.target.value)}\n\t\t\t\t\t\t\tvalue={subject}\n\t\t\t\t\t\t\tmultiple={true}\n\t\t\t\t\t\t></TextField>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tplaceholder=\"Description:\"\n\t\t\t\t\t\t\tmultiline={true}\n\t\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\talignItems: 'initial',\n\t\t\t\t\t\t\t\tminHeight: '200px',\n\t\t\t\t\t\t\t\tminWidth: '500px',\n\t\t\t\t\t\t\t\tbackgroundColor: 'white'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonChange={(e) => setDescription(e.target.value)}\n\t\t\t\t\t\t\tvalue={description}\n\t\t\t\t\t\t></TextField>\n\t\t\t\t\t</Card>\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tsaveItem(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tclearInput(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tClear\n\t\t\t\t\t</Button>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t{todoList.map((e, k) => (\n\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t\t<Paper key={k} style={{ backgroundColor: 'black' }}>\n\t\t\t\t\t\t\t\t\t<Card style={{ backgroundColor: color[k] }} raised={true} width=\"200px\">\n\t\t\t\t\t\t\t\t\t\t<CardContent\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\ttextAlign: 'left',\n\t\t\t\t\t\t\t\t\t\t\t\tminHeight: '400px'\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{e}\n\t\t\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t<Button onClick={() => handleRemoveItem(k)} variant=\"outlined\" color=\"secondary\">\n\t\t\t\t\t\t\t\t\t\tDone\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Container>\n\t\t\t\t\t<hr style={{ width: '50%' }} />\n\t\t\t\t\t<Button size=\"large\" variant=\"outlined\" color=\"secondary\" onClick={(e) => deletetodoList(e)}>\n\t\t\t\t\t\tClear <br></br>\n\t\t\t\t\t</Button>\n\t\t\t\t\t<br />\n\t\t\t\t</Container>\n\t\t\t\t<Typography style={{ color: 'white', textAlign: 'center', fontSize: 'calc(25px + 2vmin)' }}>\n\t\t\t\t\tprogramandoconro\n\t\t\t\t</Typography>\n\t\t\t</Container>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}