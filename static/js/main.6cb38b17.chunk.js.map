{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","list","id","handleChange","bind","handleKeyDown","this","setState","target","value","event","keyCode","preventDefault","stopPropagation","todo","newList","removeItem","index","splice","showTable","map","val","style","color","onClick","role","className","onChange","e","onKeyDown","item","push","results","Math","random","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOA+FmBA,G,kBA3FjB,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,KAAM,GACNC,KAAM,GACNC,GAAI,GAGN,EAAKC,aAAaC,OAClB,EAAKC,cAAcD,OATP,E,0EAWAJ,GACZM,KAAKC,SAAU,CAACP,KAAMA,EAAKQ,OAAOC,U,oCAEtBC,GACU,KAAlBA,EAAMC,UACRD,EAAME,iBACNF,EAAMG,qB,+BAID,IAAD,OACAC,EAAOR,KAAKP,MAAMC,KAClBe,EAAST,KAAKP,MAAME,KACpBC,EAAKI,KAAKP,MAAMG,GAChBc,EAAW,SAACC,GAChB,IAAMhB,EAAO,EAAKF,MAAME,KACxBA,EAAKiB,OAAOD,EAAO,GACnB,EAAKV,SAAS,CAAEN,UAaZkB,EAAaJ,EAAQK,KAAI,SAAAC,GAAG,OAAG,gCAAK,gCAAMA,EAAN,IAAY,4BACpDC,MAAO,CAACC,MAAM,OACdC,QAASR,GAET,0BAAMS,KAAK,OAAX,4BAJmC,QAOnC,OACE,yBAAKC,UAAU,OACf,yBAAKA,UAAU,cACf,uBAAGA,UAAU,cACZZ,GAED,yBAAKY,UAAU,cACf,8BACA,2BAEAC,SAAY,SAAAC,GAAC,OAAG,EAAKzB,aAAayB,IAClCnB,MAASK,EACTe,UAAWvB,KAAKD,gBAGhB,+BAGA,6BACA,mCACA,4BACAqB,UAAY,cACZF,QAAW,kBAxCMM,EAwCU,EAAK/B,MAAMC,KAvCxCe,EAAQgB,KAAKD,GACb,EAAKvB,SAAU,CACbyB,QAAQ,CACN/B,KAAOc,EAAQK,KAAI,SAAAQ,GAAC,MAAE,CAACA,EAAEK,KAAKC,aAC9BlC,KAAM,GACNE,GAAGA,EAAG,UAGViC,QAAQC,IAAI,EAAKrC,MAAMiC,SATL,IAACF,IAsCjB,QAMA,mCACA,4BACAJ,UAAY,gBACZF,QAAW,SAAAI,GAAC,OAAE,EAAKzB,aAAayB,KAFhC,UAOA,wBAAIF,UAAU,aACbP,S,GApFUkB,IAAMC,YCSLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6cb38b17.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass  App extends React.Component {\n  constructor (){\n    super()\n    this.state = {\n      data: '',\n      list: [],\n      id: 0\n      \n    }\n    this.handleChange.bind();\n    this.handleKeyDown.bind(); \n  }\n  handleChange (data) {\n    this.setState ({data: data.target.value});  \n  };\n  handleKeyDown(event) {\n    if (event.keyCode === 13) {\n      event.preventDefault(); \n      event.stopPropagation();\n    }\n  };\n  \n  render(){\n    const todo = this.state.data;\n    const newList= this.state.list ;\n    const id = this.state.id;\n    const removeItem=(index)=> {\n      const list = this.state.list;\n      list.splice(index, 1);\n      this.setState({ list });\n    };\n    const handleClick = (item) => {\n      newList.push(item);        \n      this.setState ({\n        results:{\n          list:  newList.map(e=>[e,Math.random()]),\n          data: '',\n          id:id+1,\n        }\n      });     \n      console.log(this.state.results);\n    };\n    const showTable =  newList.map(val=> <li> <h3> {val} {<button \n      style={{color:'red'}}\n      onClick={removeItem}      \n      > \n      <span role=\"img\"> Remove  ✔️ </span>  \n      </button> }</h3> </li>);  \n      \n      return (\n        <div className=\"App\">\n        <div className=\"App-header\">\n        <p className=\"Input-todo\">\n        {todo}\n        </p> \n        <div className=\"Input-Form\" > \n        <form >\n        <input \n    \n        onChange = {e=> this.handleChange(e)}\n        value = {todo}\n        onKeyDown={this.handleKeyDown}\n        >\n        </input>\n        <hr></hr>\n        </form>\n        </div>\n        <div> \n        <text> </text>\n        <button \n        className = 'Save-Button'\n        onClick = {()=>handleClick(this.state.data)}\n        > \n        Save\n        </button>\n        <text> </text>   \n        <button \n        className = 'Delete-Button'\n        onClick = {e=>this.handleChange(e)}\n        > \n        Clear\n        </button>\n        </div>\n        <ul className=\"Input-box\" >\n        {showTable}\n        </ul> \n       </div>\n        </div>      \n        );\n      }\n    };\n    \n    export default App;\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}